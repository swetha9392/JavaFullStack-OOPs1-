In Java, an inner class is a class declared inside another class.
It helps logically group classes that are only used in one place, and it can access private members of the outer class.

üß© Types of Inner Classes

There are 4 main types:

Type	                                 Description
1. Non-static Inner Class (Member Inner Class)	A normal class defined inside another class. It can access all members (including private) of the outer class.
2. Static Nested Class	A static class defined inside another class. It can‚Äôt access non-static members of the outer class directly.
3. Local Inner Class	A class defined inside a method. Its scope is limited to that method only.
4. Anonymous Inner Class	A class without a name, declared and instantiated in a single statement (usually for implementing interfaces or abstract classes).

1Ô∏è‚É£ Non-static Inner Class (Member Inner Class)
class Outer {
    private String message = "Hello from Outer class";

    class Inner {
        void display() {
            System.out.println(message); // Can access private members
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Outer outer = new Outer();
        Outer.Inner inner = outer.new Inner(); // Create inner class object
        inner.display();
    }
}
2Ô∏è‚É£ Static Nested Class
class Outer {
    private static String msg = "Static Nested Example";

    static class Inner {
        void show() {
            System.out.println(msg);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Outer.Inner obj = new Outer.Inner(); // No need of outer object
        obj.show();
    }
}

3Ô∏è‚É£ Local Inner Class (Inside a Method)
class Outer {
    void outerMethod() {
        class Inner {
            void show() {
                System.out.println("Inside Local Inner Class");
            }
        }
        Inner inner = new Inner();
        inner.show();
    }
}

public class Main {
    public static void main(String[] args) {
        Outer o = new Outer();
        o.outerMethod();
    }
}

4Ô∏è‚É£ Anonymous Inner Class

Used when we need one-time implementation of an interface or abstract class.

interface Greeting {
    void sayHello();
}

public class Main {
    public static void main(String[] args) {
        Greeting g = new Greeting() { // Anonymous class
            public void sayHello() {
                System.out.println("Hello from Anonymous Inner Class");
            }
        };
        g.sayHello();
    }
}